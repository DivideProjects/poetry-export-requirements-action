name: "CI"

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v3

    - name: Sample pyproject.toml file
      run: |-
          cat > pyproject.toml << EOF
          [tool.poetry]
          name = "sampleenvfile"
          version = "1.0.0"
          description = ""
          authors = []

          [tool.poetry.dependencies]
          python = "^3.9"
          urllib3 = "^1.26"

          [build-system]
          requires = ["poetry-core>=1.0.0"]
          build-backend = "poetry.core.masonry.api"

          EOF
  
    - id: test-default
      name: Test default
      uses: ./

    - name: Check custom-file-name
      run: |-
        if [ -e ${{ steps.test-default.outputs.custom-file-name }} ]
        then
            echo "file exists"
            echo ${{ steps.test-default.outputs.contents }} | wc -l
        else
            echo "file does not exists"
            exit 1
        fi

    - id: test-outfile-name
      name: Test outfile-name
      uses: ./
      with:
        without-hashes: false
        outfile-name: requirements-custom-name.txt

    - name: Check outfile-name
      run: |-
        if [ -e ${{ steps.test-outfile-name.outputs.custom-file-name }} ]
        then
            echo "file exists"
            echo ${{ steps.test-outfile-name.outputs.contents }} | wc -l
        else
            echo "file does not exists"
            exit 1
        fi

    - id: test-without-hashes
      name: Test without-hashes
      uses: ./
      with:
        without-hashes: false
        outfile-name: requirements-without-hashes.txt

    - name: Check without-hashes
      run: |-
        if [ -e ${{ steps.test-without-hashes.outputs.custom-file-name }} ]
        then
            echo "file exists"
            echo ${{ steps.test-without-hashes.outputs.contents }} | wc -l
        else
            echo "file does not exists"
            exit 1
        fi
